package com.rudearts.weatherapp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER_DB".
*/
public class WeatherDbDao extends AbstractDao<WeatherDb, Long> {

    public static final String TABLENAME = "WEATHER_DB";

    /**
     * Properties of entity WeatherDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cod = new Property(1, Integer.class, "cod", false, "COD");
        public final static Property Main = new Property(2, Integer.class, "main", false, "MAIN");
        public final static Property Description = new Property(3, Integer.class, "description", false, "DESCRIPTION");
        public final static Property Icon = new Property(4, Integer.class, "icon", false, "ICON");
        public final static Property Temperature = new Property(5, Double.class, "temperature", false, "TEMPERATURE");
        public final static Property Pressure = new Property(6, Double.class, "pressure", false, "PRESSURE");
        public final static Property Humidity = new Property(7, Double.class, "humidity", false, "HUMIDITY");
    }


    public WeatherDbDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COD\" INTEGER," + // 1: cod
                "\"MAIN\" INTEGER," + // 2: main
                "\"DESCRIPTION\" INTEGER," + // 3: description
                "\"ICON\" INTEGER," + // 4: icon
                "\"TEMPERATURE\" REAL," + // 5: temperature
                "\"PRESSURE\" REAL," + // 6: pressure
                "\"HUMIDITY\" REAL);"); // 7: humidity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cod = entity.getCod();
        if (cod != null) {
            stmt.bindLong(2, cod);
        }
 
        Integer main = entity.getMain();
        if (main != null) {
            stmt.bindLong(3, main);
        }
 
        Integer description = entity.getDescription();
        if (description != null) {
            stmt.bindLong(4, description);
        }
 
        Integer icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(5, icon);
        }
 
        Double temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(6, temperature);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(7, pressure);
        }
 
        Double humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(8, humidity);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cod = entity.getCod();
        if (cod != null) {
            stmt.bindLong(2, cod);
        }
 
        Integer main = entity.getMain();
        if (main != null) {
            stmt.bindLong(3, main);
        }
 
        Integer description = entity.getDescription();
        if (description != null) {
            stmt.bindLong(4, description);
        }
 
        Integer icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(5, icon);
        }
 
        Double temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(6, temperature);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(7, pressure);
        }
 
        Double humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindDouble(8, humidity);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeatherDb readEntity(Cursor cursor, int offset) {
        WeatherDb entity = new WeatherDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cod
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // main
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // icon
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // temperature
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // pressure
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7) // humidity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCod(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMain(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIcon(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTemperature(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setPressure(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setHumidity(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeatherDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeatherDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeatherDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
